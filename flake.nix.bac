{
  description = "rust flake with oxlica overlay";

  inputs = {
    nixpkgs.url      = "github:NixOS/nixpkgs/nixos-unstable";
    # rust-overlay.url = "github:oxalica/rust-overlay";
    # flake-utils.url  = "github:numtide/flake-utils";
  };

  # outputs = { self, nixpkgs, rust-overlay, flake-utils, ... }:
  outputs = { self, nixpkgs, ... }:
    # flake-utils.lib.eachDefaultSystem (system:
      let
        supportedSystems = [ "x86_64-linux" ];
        forAllSystems = nixpkgs.lib.genAttrs supportedSystems;
        pkgsFor = nixpkgs.legacyPackages;
        # overlays = [ (import rust-overlay) ];
        # pkgs = import nixpkgs { inherit system overlays; };
      in
      {
        # devShells.default= with pkgs; mkShell {
        #   buildInputs = [
        #     openssl
        #     pkg-config
        #     rust-bin.beta.latest.default
        #   ];
        #   packages = with pkgs; [
        #     bacon
        #     rust-analyzer
        #   ];
        # };
      devShells = forAllSystems (system: {
        default = pkgsFor.${system}.callPackage ./shell.nix { };
      });
        # packages = forAllSystems (pkgs: {
        #   default = self.packages.${pkgs.stdenv.hostPlatform.system}.project;
        #   project = pkgs.callPackage ./default.nix { version = self.shortRev or "unstable"; };
        # });
      #   packages = forAllSystems (system: {
      #     default = pkgsFor.${system}.callPackage ./default.nix { };
      #   });
      # };
    # )
    }

